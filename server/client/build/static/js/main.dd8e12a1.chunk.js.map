{"version":3,"sources":["ComponentServices.js","VideoApp.js","serviceWorker.js","index.js"],"names":["ComponentServices","start","end","fileName","formParam","FormData","append","fetch","method","body","then","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","error","console","log","file1","name","json","result","_context","t0","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentService","sliderConfiguration","value","setState","state","file1Name","downloadFileName","key","beforeLoad","min","max","disableSlider","silderMax","initialConfig","_this2","FileReader","refs","customFile1","files","readAsText","uploadFile","data","enableSaveButton","save","enableLoadButton","event","currentTarget","_this3","react_default","className","src","height","width","id","controls","style","padding","js_default","maxValue","minValue","title","disabled","onChange","type","accept","fileNameChanged","bind","ref","onClick","loadvideo","paddingRight","paddingLeft","htmlFor","changeDownloadFileName","marginRight","cutVideo","marginBottom","marginLeft","Component","Boolean","location","hostname","match","ReactDOM","render","VideoApp_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd8e12a1.chunk.js","sourcesContent":["export default class ComponentServices {\r\n\r\n  save(start,end,fileName) {\r\n    let formParam = new FormData();\r\n    formParam.append(\"startTime\", start);\r\n    formParam.append(\"endTime\", end);\r\n    try {\r\n      fetch(\"http://localhost:5000/cutVideo\", {\r\n        method: 'POST',\r\n        body: formParam\r\n      }).then((response)=>{\r\n        response.blob().then(blob => {\r\n        let url = window.URL.createObjectURL(blob);\r\n        let a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = fileName;\r\n        a.click();\r\n      });\r\n\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  async uploadFile(file1) {\r\n    let response = ''\r\n    let formParam = new FormData();\r\n    formParam.append(\"file\", file1);\r\n    formParam.append(\"filename\", file1.name);\r\n    try {\r\n      response = await fetch(\"http://localhost:5000/uploadVideo\", {\r\n        method: 'POST',\r\n        body: formParam\r\n      })\r\n      var result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ComponentServices from './ComponentServices';\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\n\r\nexport default class App extends Component {\r\n    componentService = new ComponentServices();\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            file1Name: \"\",\r\n            downloadFileName: '',\r\n            key:0,\r\n            beforeLoad:true,\r\n            value: { min: 0, max: 100 },\r\n            url:\"\",\r\n            disableSlider:true,\r\n            silderMax:100,\r\n            initialConfig:true\r\n          };\r\n    }\r\n      /**\r\n       * loadvideo method Upload videos to the server\r\n       */\r\n      loadvideo() {\r\n        let file1 = new FileReader();\r\n        if (this.refs.customFile1.files[0]) {\r\n            file1.readAsText(this.refs.customFile1.files[0]);\r\n        }\r\n        let result = this.componentService.uploadFile(this.refs.customFile1.files[0]);\r\n        result.then((data) => {\r\n          let value= { min: 0, max: 100 }\r\n          let key = !this.state.key;\r\n          this.setState({\"value\":value,\r\n                          \"key\":key,\r\n                          \"beforeLoad\":false,\r\n                          \"url\":\"http://localhost:5000/Video\",\r\n                          \"disableSlider\":false,\r\n                          \"enableSaveButton\" : true\r\n                        });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This will crop the input video and also download it from the server\r\n     */\r\n    cutVideo() {\r\n        this.componentService.save(this.state.value.min,this.state.value.max,this.state.downloadFileName);\r\n    }\r\n\r\n    /**\r\n     * This will enable the load button once the file name is specified\r\n     */\r\n    fileNameChanged() {\r\n        let state = this.state;\r\n        state.enableLoadButton = this.refs.customFile1.value != \"\";\r\n        state.downloadFileName = this.refs.customFile1.files[0] ? this.refs.customFile1.files[0].name :\"\";\r\n        this.setState(state);\r\n    }\r\n\r\n    \r\n    changeDownloadFileName(event) {\r\n        let state = this.state;\r\n        state.downloadFileName = event.currentTarget.value;\r\n        this.setState(state);\r\n      }\r\n\r\n\r\n    sliderConfiguration=(value)=>{\r\n      this.setState({\"value\":value})\r\n    }\r\n\r\n    render(){\r\n      return (<div className=\"card \">\r\n      <div className=\"header\" ><img src=\"/icon.jpg\" height=\"200px\"  width=\"200px\" className=\"rounded\" ></img><br/><b>Crop your wonderfull videos here</b></div>\r\n      <video id=\"videoPlayer\" controls key={this.state.key} src={this.state.url} >\r\n      </video>\r\n      <div style={{padding:\"8px 36px\"}}><InputRange\r\n        maxValue={this.state.silderMax}\r\n        minValue={0}\r\n        title=\"Cropping bar\"\r\n        disabled={this.state.disableSlider}\r\n        value={this.state.value}\r\n        onChange={value => {this.sliderConfiguration(value)}} /><b>Cropping bar</b></div>\r\n      <form className=\"form-group paddingTop-2 \" >\r\n        <div className=\"custom-file col-md-3\" >\r\n          <input type=\"file\" accept=\"video/*\" className=\"form-control form-control-file border btn-sm\" onChange={this.fileNameChanged.bind(this)} ref=\"customFile1\" id=\"customFile1\" />\r\n        </div>\r\n        <input type=\"button\" onClick={this.loadvideo.bind(this)} className=\"btn btn-primary btn-sm marginLeft-2\" disabled={!this.state.enableLoadButton} value=\"Load\" />\r\n          <label className=\"form-control-label text-weight-bold text-primary\" style={{ \"paddingRight\": \"8px\", \"paddingLeft\": \"16px\" }} htmlFor=\"save-fila-name\">Enter File Name </label>\r\n          <input type=\"text\" ref=\"saveFileName\"  onChange={this.changeDownloadFileName.bind(this)} className=\"form-control-input\" value={this.state.downloadFileName} style={{ \"marginRight\": \"8px\" }} id=\"save-file-name\" />\r\n          <input type=\"button\" onClick={this.cutVideo.bind(this)} style={{ \"marginBottom\": \"4px\", \"marginLeft\": \"20px\" }} disabled={!this.state.enableSaveButton} className=\"btn btn-primary btn-sm\" value=\" Cut and Download\"></input>\r\n      </form>\r\n      <div className=\"support\">\r\n      <label>It supports chrome browser alone</label>\r\n      </div>\r\n    </div>);\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './VideoApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}